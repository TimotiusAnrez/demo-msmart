/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    media: Media;
    discussion: Discussion;
    discussionCategories: DiscussionCategory;
    discussionComment: DiscussionComment;
    locations: Location;
    locationCategories: LocationCategory;
    reports: Report;
    reportCategories: ReportCategory;
    facility: Facility;
    shopCategories: ShopCategory;
    shops: Shop;
    shopProductCategory: ShopProductCategory;
    shopProducts: ShopProduct;
    productVariant: ProductVariant;
    cart: Cart;
    cartItems: CartItem;
    transaction: Transaction;
    newsCategory: NewsCategory;
    news: News;
    farmers: Farmer;
    farmerProduce: FarmerProduce;
    produceCategory: ProduceCategory;
    pages: Page;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {
    discussion: {
      commentList: 'discussionComment';
    };
    locationCategories: {
      locationList: 'locations';
    };
    reportCategories: {
      ReportList: 'reports';
    };
    shopCategories: {
      shopList: 'shops';
    };
    shops: {
      productList: 'shopProducts';
    };
    shopProductCategory: {
      productList: 'shopProducts';
    };
    shopProducts: {
      variantList: 'productVariant';
    };
    cart: {
      cartItemList: 'cartItems';
    };
    farmers: {
      produceList: 'farmerProduce';
    };
  };
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    discussion: DiscussionSelect<false> | DiscussionSelect<true>;
    discussionCategories: DiscussionCategoriesSelect<false> | DiscussionCategoriesSelect<true>;
    discussionComment: DiscussionCommentSelect<false> | DiscussionCommentSelect<true>;
    locations: LocationsSelect<false> | LocationsSelect<true>;
    locationCategories: LocationCategoriesSelect<false> | LocationCategoriesSelect<true>;
    reports: ReportsSelect<false> | ReportsSelect<true>;
    reportCategories: ReportCategoriesSelect<false> | ReportCategoriesSelect<true>;
    facility: FacilitySelect<false> | FacilitySelect<true>;
    shopCategories: ShopCategoriesSelect<false> | ShopCategoriesSelect<true>;
    shops: ShopsSelect<false> | ShopsSelect<true>;
    shopProductCategory: ShopProductCategorySelect<false> | ShopProductCategorySelect<true>;
    shopProducts: ShopProductsSelect<false> | ShopProductsSelect<true>;
    productVariant: ProductVariantSelect<false> | ProductVariantSelect<true>;
    cart: CartSelect<false> | CartSelect<true>;
    cartItems: CartItemsSelect<false> | CartItemsSelect<true>;
    transaction: TransactionSelect<false> | TransactionSelect<true>;
    newsCategory: NewsCategorySelect<false> | NewsCategorySelect<true>;
    news: NewsSelect<false> | NewsSelect<true>;
    farmers: FarmersSelect<false> | FarmersSelect<true>;
    farmerProduce: FarmerProduceSelect<false> | FarmerProduceSelect<true>;
    produceCategory: ProduceCategorySelect<false> | ProduceCategorySelect<true>;
    pages: PagesSelect<false> | PagesSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {
    header: Header;
    landingPage: LandingPage;
  };
  globalsSelect: {
    header: HeaderSelect<false> | HeaderSelect<true>;
    landingPage: LandingPageSelect<false> | LandingPageSelect<true>;
  };
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  fullName?: string | null;
  clerkID: string;
  role: ('USER' | 'USER_BUSINESS' | 'ADMIN_MS' | 'ADMIN_MSAGRI' | 'SUPER_ADMIN')[];
  isSuspended?: boolean | null;
  information: {
    firstName: string;
    lastName: string;
    gender: 'male' | 'female';
    DOB: string;
  };
  contact: {
    email: {
      handler: string;
      isVerified: boolean;
    };
    phone?: {
      number?: string | null;
      isVerified?: boolean | null;
    };
  };
  verification: {
    documentType?: ('PASSPORT' | 'IDCARD') | null;
    documentNumber?: string | null;
    status: 'UNVERIFIED' | 'VERIFICATION_REQUEST' | 'DECLINED' | 'VERIFIED';
    rejectReason?: {
      reason?:
        | ('INVALID_DOCUMENT' | 'EXPIRED_DOCUMENT' | 'NOT_MATCH_DOCUMENT' | 'INCOMPLETE_CONTACT_INFO' | 'OTHER')
        | null;
      description?: string | null;
      isResolved?: boolean | null;
    };
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: number;
  alt?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    card?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    tablet?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "discussion".
 */
export interface Discussion {
  id: number;
  title: string;
  author: number | User;
  category: (number | DiscussionCategory)[];
  status: 'OPEN' | 'REPORTED' | 'ARCHIVED';
  content: string;
  media?: (number | null) | Media;
  reportList?:
    | {
        reportType: 'SPAM' | 'FAKE_INFORMATION' | 'OTHER';
        reportContent: string;
        reporter: number | User;
        confirmed?: boolean | null;
        id?: string | null;
      }[]
    | null;
  commentList?: {
    docs?: (number | DiscussionComment)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "discussionCategories".
 */
export interface DiscussionCategory {
  id: number;
  name: string;
  isArchived?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "discussionComment".
 */
export interface DiscussionComment {
  id: number;
  commenter: number | User;
  content: string;
  discussion: number | Discussion;
  isReported?: boolean | null;
  archived?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "locations".
 */
export interface Location {
  id: number;
  MediaGallery?:
    | {
        media?: (number | null) | Media;
        id?: string | null;
      }[]
    | null;
  name: string;
  category: (number | LocationCategory)[];
  description?: string | null;
  location: {
    address: string;
    /**
     * @minItems 2
     * @maxItems 2
     */
    geo: [number, number];
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "locationCategories".
 */
export interface LocationCategory {
  id: number;
  name: string;
  locationList?: {
    docs?: (number | Location)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "reports".
 */
export interface Report {
  id: number;
  title: string;
  author: number | User;
  category: (number | ReportCategory)[];
  status: 'OPEN' | 'ON_REVIEW' | 'CLOSED';
  content: string;
  media: number | Media;
  adminResponse?:
    | {
        comment: string;
        media?: (number | null) | Media;
        admin: number | User;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "reportCategories".
 */
export interface ReportCategory {
  id: number;
  name: string;
  ReportList?: {
    docs?: (number | Report)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  isArchived?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "facility".
 */
export interface Facility {
  id: number;
  logo?: (number | null) | Media;
  name: string;
  type: 'PUBLIC' | 'PRIVATE';
  sector: 'HEALTH' | 'EDUCATION' | 'GOVERNMENT' | 'PUBLIC_SERVICE' | 'INFRASTRUCTURE';
  isArchived?: boolean | null;
  description: string;
  location: {
    address: string;
    /**
     * @minItems 2
     * @maxItems 2
     */
    geo: [number, number];
  };
  contactList?:
    | {
        type: 'EMAIL' | 'PHONE' | 'WHATSAPP' | 'WEBSITE';
        value: string;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "shopCategories".
 */
export interface ShopCategory {
  id: number;
  name: string;
  thumbnail?: (number | null) | Media;
  shopList?: {
    docs?: (number | Shop)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "shops".
 */
export interface Shop {
  id: number;
  shopName?: string | null;
  category: number | ShopCategory;
  mediaGallery?:
    | {
        media?: (number | null) | Media;
        id?: string | null;
      }[]
    | null;
  information: ShopInformation;
  location: {
    address: string;
    /**
     * @minItems 2
     * @maxItems 2
     */
    geo: [number, number];
  };
  contact?: {
    email?: string | null;
    phone?: string | null;
    whatsapp?: string | null;
    website?: string | null;
  };
  productList?: {
    docs?: (number | ShopProduct)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ShopInformation".
 */
export interface ShopInformation {
  legalName: string;
  tradingName: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "shopProducts".
 */
export interface ShopProduct {
  id: number;
  productName?: string | null;
  owner: number | Shop;
  information: {
    mediaGallery?:
      | {
          media?: (number | null) | Media;
          id?: string | null;
        }[]
      | null;
    name: string;
    description: string;
    defaultPrice: number;
  };
  category: (number | ShopProductCategory)[];
  variantList?: {
    docs?: (number | ProductVariant)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "shopProductCategory".
 */
export interface ShopProductCategory {
  id: number;
  name: string;
  productList?: {
    docs?: (number | ShopProduct)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "productVariant".
 */
export interface ProductVariant {
  id: number;
  product?: (number | null) | ShopProduct;
  name: string;
  thumbnail?: (number | null) | Media;
  price: number;
  stock: number;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "cart".
 */
export interface Cart {
  id: number;
  user: number | User;
  cartItemList?: {
    docs?: (number | CartItem)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "cartItems".
 */
export interface CartItem {
  id: number;
  cart: number | User;
  product: number | ShopProduct;
  variant?: (number | null) | ProductVariant;
  quantity: number;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "transaction".
 */
export interface Transaction {
  id: number;
  user: number | User;
  shop: number | Shop;
  status: 'PENDING' | 'COMPLETED' | 'FAILED';
  itemList?:
    | {
        transactionItemDetail: TransactionItemDetail;
        id?: string | null;
      }[]
    | null;
  totalPrice: number;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TransactionItemDetail".
 */
export interface TransactionItemDetail {
  item: number | ShopProduct;
  quantity: number;
  variant: number | ProductVariant;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "newsCategory".
 */
export interface NewsCategory {
  id: number;
  name: string;
  isArchived?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "news".
 */
export interface News {
  id: number;
  newsTitle?: string | null;
  meta: {
    title: string;
    category: (number | NewsCategory)[];
    description: string;
    banner: number | Media;
  };
  newsContentSection?: (NewsParagraphBlock | ParagraphWithImageBlock)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "NewsParagraphBlock".
 */
export interface NewsParagraphBlock {
  paragraphTitle?: string | null;
  content: string;
  id?: string | null;
  blockName?: string | null;
  blockType: 'newsParagraphBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ParagraphWithImageBlock".
 */
export interface ParagraphWithImageBlock {
  paragraphTitle?: string | null;
  content: string;
  image: number | Media;
  position: 'default' | 'left' | 'right';
  id?: string | null;
  blockName?: string | null;
  blockType: 'paragraphWithImageBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "farmers".
 */
export interface Farmer {
  id: number;
  fullName?: string | null;
  personal: {
    firstName: string;
    lastName: string;
  };
  contact: {
    phone: string;
    whatsapp: string;
  };
  location: {
    address: string;
    /**
     * @minItems 2
     * @maxItems 2
     */
    geo: [number, number];
  };
  produceList?: {
    docs?: (number | FarmerProduce)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "farmerProduce".
 */
export interface FarmerProduce {
  id: number;
  farmer: number | Farmer;
  name: string;
  mediaGalery?:
    | {
        image?: (number | null) | Media;
        id?: string | null;
      }[]
    | null;
  category: number | ProduceCategory;
  stock: {
    quantity: number;
    unit: 'KG' | 'TON';
  };
  price: {
    nominal: number;
    unit: 'KG' | 'TON';
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "produceCategory".
 */
export interface ProduceCategory {
  id: number;
  name: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: number;
  title: string;
  slug: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'users';
        value: number | User;
      } | null)
    | ({
        relationTo: 'media';
        value: number | Media;
      } | null)
    | ({
        relationTo: 'discussion';
        value: number | Discussion;
      } | null)
    | ({
        relationTo: 'discussionCategories';
        value: number | DiscussionCategory;
      } | null)
    | ({
        relationTo: 'discussionComment';
        value: number | DiscussionComment;
      } | null)
    | ({
        relationTo: 'locations';
        value: number | Location;
      } | null)
    | ({
        relationTo: 'locationCategories';
        value: number | LocationCategory;
      } | null)
    | ({
        relationTo: 'reports';
        value: number | Report;
      } | null)
    | ({
        relationTo: 'reportCategories';
        value: number | ReportCategory;
      } | null)
    | ({
        relationTo: 'facility';
        value: number | Facility;
      } | null)
    | ({
        relationTo: 'shopCategories';
        value: number | ShopCategory;
      } | null)
    | ({
        relationTo: 'shops';
        value: number | Shop;
      } | null)
    | ({
        relationTo: 'shopProductCategory';
        value: number | ShopProductCategory;
      } | null)
    | ({
        relationTo: 'shopProducts';
        value: number | ShopProduct;
      } | null)
    | ({
        relationTo: 'productVariant';
        value: number | ProductVariant;
      } | null)
    | ({
        relationTo: 'cart';
        value: number | Cart;
      } | null)
    | ({
        relationTo: 'cartItems';
        value: number | CartItem;
      } | null)
    | ({
        relationTo: 'transaction';
        value: number | Transaction;
      } | null)
    | ({
        relationTo: 'newsCategory';
        value: number | NewsCategory;
      } | null)
    | ({
        relationTo: 'news';
        value: number | News;
      } | null)
    | ({
        relationTo: 'farmers';
        value: number | Farmer;
      } | null)
    | ({
        relationTo: 'farmerProduce';
        value: number | FarmerProduce;
      } | null)
    | ({
        relationTo: 'produceCategory';
        value: number | ProduceCategory;
      } | null)
    | ({
        relationTo: 'pages';
        value: number | Page;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  fullName?: T;
  clerkID?: T;
  role?: T;
  isSuspended?: T;
  information?:
    | T
    | {
        firstName?: T;
        lastName?: T;
        gender?: T;
        DOB?: T;
      };
  contact?:
    | T
    | {
        email?:
          | T
          | {
              handler?: T;
              isVerified?: T;
            };
        phone?:
          | T
          | {
              number?: T;
              isVerified?: T;
            };
      };
  verification?:
    | T
    | {
        documentType?: T;
        documentNumber?: T;
        status?: T;
        rejectReason?:
          | T
          | {
              reason?: T;
              description?: T;
              isResolved?: T;
            };
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        thumbnail?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        card?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        tablet?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "discussion_select".
 */
export interface DiscussionSelect<T extends boolean = true> {
  title?: T;
  author?: T;
  category?: T;
  status?: T;
  content?: T;
  media?: T;
  reportList?:
    | T
    | {
        reportType?: T;
        reportContent?: T;
        reporter?: T;
        confirmed?: T;
        id?: T;
      };
  commentList?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "discussionCategories_select".
 */
export interface DiscussionCategoriesSelect<T extends boolean = true> {
  name?: T;
  isArchived?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "discussionComment_select".
 */
export interface DiscussionCommentSelect<T extends boolean = true> {
  commenter?: T;
  content?: T;
  discussion?: T;
  isReported?: T;
  archived?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "locations_select".
 */
export interface LocationsSelect<T extends boolean = true> {
  MediaGallery?:
    | T
    | {
        media?: T;
        id?: T;
      };
  name?: T;
  category?: T;
  description?: T;
  location?:
    | T
    | {
        address?: T;
        geo?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "locationCategories_select".
 */
export interface LocationCategoriesSelect<T extends boolean = true> {
  name?: T;
  locationList?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "reports_select".
 */
export interface ReportsSelect<T extends boolean = true> {
  title?: T;
  author?: T;
  category?: T;
  status?: T;
  content?: T;
  media?: T;
  adminResponse?:
    | T
    | {
        comment?: T;
        media?: T;
        admin?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "reportCategories_select".
 */
export interface ReportCategoriesSelect<T extends boolean = true> {
  name?: T;
  ReportList?: T;
  isArchived?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "facility_select".
 */
export interface FacilitySelect<T extends boolean = true> {
  logo?: T;
  name?: T;
  type?: T;
  sector?: T;
  isArchived?: T;
  description?: T;
  location?:
    | T
    | {
        address?: T;
        geo?: T;
      };
  contactList?:
    | T
    | {
        type?: T;
        value?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "shopCategories_select".
 */
export interface ShopCategoriesSelect<T extends boolean = true> {
  name?: T;
  thumbnail?: T;
  shopList?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "shops_select".
 */
export interface ShopsSelect<T extends boolean = true> {
  shopName?: T;
  category?: T;
  mediaGallery?:
    | T
    | {
        media?: T;
        id?: T;
      };
  information?: T | ShopInformationSelect<T>;
  location?:
    | T
    | {
        address?: T;
        geo?: T;
      };
  contact?:
    | T
    | {
        email?: T;
        phone?: T;
        whatsapp?: T;
        website?: T;
      };
  productList?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ShopInformation_select".
 */
export interface ShopInformationSelect<T extends boolean = true> {
  legalName?: T;
  tradingName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "shopProductCategory_select".
 */
export interface ShopProductCategorySelect<T extends boolean = true> {
  name?: T;
  productList?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "shopProducts_select".
 */
export interface ShopProductsSelect<T extends boolean = true> {
  productName?: T;
  owner?: T;
  information?:
    | T
    | {
        mediaGallery?:
          | T
          | {
              media?: T;
              id?: T;
            };
        name?: T;
        description?: T;
        defaultPrice?: T;
      };
  category?: T;
  variantList?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "productVariant_select".
 */
export interface ProductVariantSelect<T extends boolean = true> {
  product?: T;
  name?: T;
  thumbnail?: T;
  price?: T;
  stock?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "cart_select".
 */
export interface CartSelect<T extends boolean = true> {
  user?: T;
  cartItemList?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "cartItems_select".
 */
export interface CartItemsSelect<T extends boolean = true> {
  cart?: T;
  product?: T;
  variant?: T;
  quantity?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "transaction_select".
 */
export interface TransactionSelect<T extends boolean = true> {
  user?: T;
  shop?: T;
  status?: T;
  itemList?:
    | T
    | {
        transactionItemDetail?: T | TransactionItemDetailSelect<T>;
        id?: T;
      };
  totalPrice?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TransactionItemDetail_select".
 */
export interface TransactionItemDetailSelect<T extends boolean = true> {
  item?: T;
  quantity?: T;
  variant?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "newsCategory_select".
 */
export interface NewsCategorySelect<T extends boolean = true> {
  name?: T;
  isArchived?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "news_select".
 */
export interface NewsSelect<T extends boolean = true> {
  newsTitle?: T;
  meta?:
    | T
    | {
        title?: T;
        category?: T;
        description?: T;
        banner?: T;
      };
  newsContentSection?:
    | T
    | {
        newsParagraphBlock?: T | NewsParagraphBlockSelect<T>;
        paragraphWithImageBlock?: T | ParagraphWithImageBlockSelect<T>;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "NewsParagraphBlock_select".
 */
export interface NewsParagraphBlockSelect<T extends boolean = true> {
  paragraphTitle?: T;
  content?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ParagraphWithImageBlock_select".
 */
export interface ParagraphWithImageBlockSelect<T extends boolean = true> {
  paragraphTitle?: T;
  content?: T;
  image?: T;
  position?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "farmers_select".
 */
export interface FarmersSelect<T extends boolean = true> {
  fullName?: T;
  personal?:
    | T
    | {
        firstName?: T;
        lastName?: T;
      };
  contact?:
    | T
    | {
        phone?: T;
        whatsapp?: T;
      };
  location?:
    | T
    | {
        address?: T;
        geo?: T;
      };
  produceList?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "farmerProduce_select".
 */
export interface FarmerProduceSelect<T extends boolean = true> {
  farmer?: T;
  name?: T;
  mediaGalery?:
    | T
    | {
        image?: T;
        id?: T;
      };
  category?: T;
  stock?:
    | T
    | {
        quantity?: T;
        unit?: T;
      };
  price?:
    | T
    | {
        nominal?: T;
        unit?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "produceCategory_select".
 */
export interface ProduceCategorySelect<T extends boolean = true> {
  name?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "header".
 */
export interface Header {
  id: number;
  logo?: (number | null) | Media;
  menu?:
    | {
        label: string;
        page: number | Page;
        id?: string | null;
      }[]
    | null;
  service?:
    | {
        label: string;
        page: number | Page;
        id?: string | null;
      }[]
    | null;
  agriculture?:
    | {
        label: string;
        page: number | Page;
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "landingPage".
 */
export interface LandingPage {
  id: number;
  heroSection: HeroSection;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "HeroSection".
 */
export interface HeroSection {
  title: string;
  tagLine: string;
  copy: string;
  bannerImage?: (number | null) | Media;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "header_select".
 */
export interface HeaderSelect<T extends boolean = true> {
  logo?: T;
  menu?:
    | T
    | {
        label?: T;
        page?: T;
        id?: T;
      };
  service?:
    | T
    | {
        label?: T;
        page?: T;
        id?: T;
      };
  agriculture?:
    | T
    | {
        label?: T;
        page?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "landingPage_select".
 */
export interface LandingPageSelect<T extends boolean = true> {
  heroSection?: T | HeroSectionSelect<T>;
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "HeroSection_select".
 */
export interface HeroSectionSelect<T extends boolean = true> {
  title?: T;
  tagLine?: T;
  copy?: T;
  bannerImage?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}